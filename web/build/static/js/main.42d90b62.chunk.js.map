{"version":3,"sources":["CheckUpLogo.png","Navbar.js","Search.js","Display.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Bar","props","loginHandle","setState","prevState","loggedIn","state","className","expand","Brand","href","src","require","Toggle","aria-controls","Collapse","id","Component","getSuggestions","suggestionsList","value","inputValue","trim","toLowerCase","inputLength","length","filter","sugg","slice","getSuggestionValue","suggestion","renderSuggestion","Search","onChange","event","newValue","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","getLocation","a","navigator","geolocation","getCurrentPosition","coords","location","locationComplete","console","log","alert","submit","latitude","longitude","axios","post","baseURL","data","display","radius","this","Suggestions","inputProps","placeholder","theme","input","readOnly","e","target","Button","onClick","disabled","React","Display","distance","lat1","lon1","lat2","lon2","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","findNear","address","propData","Hospitals","h","parseFloat","x","y","hospitals","sort","b","itemClick","innerHTML","chartify","clicked","old","selected","indexOf","splice","ind","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","i","push","name","charge","Name","map","index","key","p_index","h_index","floor","height","options","maintainAspectRatio","responsiveAnimationDuration","scales","xAxes","ticks","beginAtZero","redraw","Footer","App","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42d90b62.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/CheckUpLogo.106969e6.png\";","import React, { Component } from 'react';\nimport \"./Navbar.css\";\nimport { Navbar, Nav, Button } from 'react-bootstrap';\n\nclass Bar extends Component {\n\n  constructor(props) {\n    super();\n    this.state = { \n      loggedIn: false\n    };\n  }\n\n  loginHandle = () => {\n    this.setState(prevState => ({\n      loggedIn: !prevState.loggedIn\n    }))\n  }\n\n  render() {\n    return (\n     \n        <Navbar className=\"navbar\" expand=\"lg\">\n          <Navbar.Brand href=\"/\">\n            <img className=\"logo\" src={require('./CheckUpLogo.png')} />\n          </Navbar.Brand>\n          <Navbar.Brand href=\"/\" className=\"title\"> CheckUp </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            {/* <Nav className=\"ml-auto\">\n              <Nav.Link href=\"/\">Search</Nav.Link>\n              <Nav.Link href=\"/\">About</Nav.Link>\n            </Nav> */}\n          </Navbar.Collapse>\n        </Navbar>\n      \n    );\n  }\n}\n\nexport default Bar;","import React from 'react';\nimport './Search.css';\nimport { Form, Button } from 'react-bootstrap';\nimport Autosuggest from 'react-autosuggest';\nimport axios from 'axios';\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (suggestionsList, value) => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  return inputLength === 0 ? [] : suggestionsList.filter(sugg =>\n    sugg.toLowerCase().slice(0, inputLength) === inputValue\n  );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n  <div>\n    {suggestion}\n  </div>\n);\n\nexport default class Search extends React.Component {\n  constructor() {\n    super();\n\n    // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n    this.state = {\n      value: '', // procedure name\n      suggestions: [],\n      location: \"\",\n      locationComplete: false,\n      radius: 0,\n      baseURL: 'https://checkuphealthcare.com' // 'http://localhost:8080'\n    };\n  }\n\n  async componentWillMount() {\n    // fetch from Flask and setState procedures\n    console.log('fetching')\n    // Imagine you have a list of suggestions that you'd like to autosuggest.\n    this.setState({ suggestionsList: (await axios(this.state.baseURL + '/autocomplete/')).data.Suggestions });\n    console.log(this.state.suggestionsList)\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(this.state.suggestionsList, value)\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  // prompts user to give their location\n  getLocation = async () => {\n    if (navigator.geolocation) {\n      await navigator.geolocation.getCurrentPosition(coords => this.setState({ location: coords, locationComplete: true }));\n      console.log('coordinates set')\n    } else {\n      alert(\"Your device doesn't support Current Location\");\n    }\n  }\n\n  submit = async () => {\n    if (this.state.value === \"\" || this.state.location === \"\")\n      alert(\"Please enter all search terms!\");\n    else {\n      if (!('latitude' in this.state.location))\n        this.setState({ coords: { coords: { latitude: 37, longitude: -122 } } })\n      let data = await axios.post(this.state.baseURL + \"/search/\", this.state);\n      this.props.display(data.data, this.state.location);\n    }\n  }\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: 'Enter a DRG Code or Description',\n      value,\n      onChange: this.onChange\n    };\n\n    return (\n      <div className=\"searchArea\">\n        <h1>Search for Medical Procedures</h1>\n        <Autosuggest theme={{ input: 'searchbar', suggestion: 'suggestionItem', suggestionsList: 'listContainer' }}\n          suggestions={suggestions}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          getSuggestionValue={getSuggestionValue}\n          renderSuggestion={renderSuggestion}\n          inputProps={inputProps}\n        />\n        <div className=\"locbar\">\n          <input readOnly={this.state.locationComplete ? true : false} className='searchbar' placeholder=\"Location\" onChange={e => { this.setState({ location: e.target.value }) }}></input>\n          <Button onClick={this.getLocation}>Use Current Location</Button>\n        </div>\n        <Button disabled={this.state.location && this.state.value ? false : true} className=\"submit\" onClick={this.submit}> Go! </Button>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport { HorizontalBar } from 'react-chartjs-2';\nimport { Form, Button, InputGroup } from 'react-bootstrap';\nimport './Display.css';\n\nclass Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { selected: [], data: null }; // selected from list\n\n    this.state.propData = this.props.data;\n    // { // this.props.data from API\n    // {\n    //   hospitals: [\n    //     { name: \"Sutter\", charge: 2000000, p_index: 2.0, h_index: 1.0, x: 11, y: -32 }\n    //   ]\n    // }\n\n    console.log(this.state.propData.Hospitals);\n  }\n\n  componentWillMount() {\n    this.findNear(this.props.location)\n  }\n\n  distance = (lat1, lon1, lat2, lon2) => {\n    if ((lat1 === lat2) && (lon1 === lon2)) {\n      return 0;\n    }\n    else {\n      let radlat1 = Math.PI * lat1 / 180;\n      let radlat2 = Math.PI * lat2 / 180;\n      let theta = lon1 - lon2;\n      let radtheta = Math.PI * theta / 180;\n      let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n      if (dist > 1) {\n        dist = 1;\n      }\n      dist = Math.acos(dist);\n      dist = dist * 180 / Math.PI;\n      dist = dist * 60 * 1.1515;\n      return dist;\n    }\n  }\n\n  // sorts hospitals by distance\n  findNear = coords => {\n    console.log(coords)\n    if (!coords.coords) { // if didn't use current location\n      if (this.state.address) {\n        console.log('need to convert')\n        // TODO: use google maps to convert address to coordinates and set to coords\n      }\n      // else { // empty location box\n      //   alert(\"Please type in your address or share Current Location\");\n      // }\n    }\n\n    for (let h of this.state.propData.Hospitals) {\n      let dist = this.distance(coords.coords.latitude, coords.coords.longitude, parseFloat(h.x), parseFloat(h.y))\n      h.dist = dist;\n      // TODO: compare Hospital coordinates with current coordinates\n      // push near hospitals to this.state.nearList and remove from this.state.propData.Hospitals\n    }\n    let hospitals = this.state.propData.Hospitals\n    hospitals.sort((a, b) => a.dist - b.dist)\n    console.log(hospitals)\n    let propData = this.state.propData;\n    propData.Hospitals = hospitals\n    this.setState({ propData })\n  }\n\n  itemClick = (e) => {\n    if (e.target.className === 'listItem')\n      e.target.className = 'listItemClicked'\n    else\n      e.target.className = 'listItem'\n    console.log(e.target.innerHTML)\n    this.chartify(e.target.innerHTML);\n  }\n\n  // converts selected data into chart.js friendly structure\n  chartify = (clicked) => {\n    let old = this.state.selected;\n    if (old.indexOf(clicked) !== -1) { // if clicked already in selected tracker\n      old.splice(old.indexOf(clicked), 1); // removes from selected tracker\n\n      let data = this.state.data;\n      let ind = data.labels.indexOf(clicked);\n      data.labels.splice(ind, 1);\n      data.datasets[0].data.splice(ind, 1);\n      this.setState({ selected: old, data });\n    }\n    else { // if clicked not yet in chart\n      let selected = [...this.state.selected, clicked]\n      let data = { // chart data template\n        labels: [], datasets: [{\n          label: 'Cost in USD ($)',\n          backgroundColor: '#38b6ff50',\n          borderColor: '#38b6ff',\n          borderWidth: 1,\n          hoverBackgroundColor: '#38b6ff83',\n          hoverBorderColor: '#38b6ff',\n          data: []\n        }]\n      }\n\n      for (let i of selected) {\n        data.labels.push(i);\n        for (let h of this.state.propData.Hospitals)\n          if (h.name === i)\n            data.datasets[0].data.push(h.charge);\n      }\n      this.setState({ data, selected });\n    }\n  }\n\n  render() {\n    return (\n      <div className='display'>\n        <h1 className='displayTitle'>{this.state.propData.Name}</h1>\n        <div className='split'>\n          <div>\n            <div className='list'>\n              <h3 className='displayTitle'>Available Hospitals:</h3>\n              {\n                this.state.propData.Hospitals.map((h, index) => {\n                  return <div key={index}>\n                    <ul className='listItem' onClick={(e) => this.itemClick(e)}>{h.name}</ul>\n                    <p>Procedure Score: {h.p_index} | Hospital Score: {h.h_index} {h.dist ? `| ${Math.floor(h.dist)} mi.` : null} </p>\n                  </div>\n                })\n              }\n            </div>\n          </div>\n          <div className='chart'>\n            {this.state.data === null ? null :\n              <HorizontalBar\n                data={this.state.data}\n                height={600}\n                options={{\n                  maintainAspectRatio: false, responsiveAnimationDuration: 500,\n                  scales: {\n                    xAxes: [{\n                      ticks: {\n                        beginAtZero: true\n                      }\n                    }]\n                  }\n                }}\n                redraw\n              />\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Display;","import React, { Component } from 'react';\nimport './Footer.css';\n\nclass Footer extends Component {\n  render() {\n    return (\n      <footer className=\"footer\">\n        <p>CheckUp © 2019</p>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Bar from './Navbar';\nimport Search from './Search';\nimport Display from './Display';\nimport Footer from './Footer';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\n\nclass App extends React.Component {\n  constructor(props) {\n    super();\n    this.state = { \n      data: null,\n      location: null\n    };\n  }\n\n  display = (data, location) => {\n    this.setState({ data, location })\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Route path=\"/\" component={Bar}/>          \n          {this.state.data == null\n            ? <Search display={this.display} /> \n            : <Display data={this.state.data} location={this.state.location} />\n          }\n          <Footer />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// TODO: set up routes and About page\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}